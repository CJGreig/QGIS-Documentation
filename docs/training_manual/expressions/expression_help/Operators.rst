:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. _expression_function_Operators_modulo:

%
.

Remainder of division

.. list-table::
   :widths: 15 85

   * - Syntax
     - a % b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 % 4`` → 1
       * ``5 % NULL`` → NULL


.. end_%_section

.. _expression_function_Operators_asterisk:

\*
..

Multiplication of two values

.. list-table::
   :widths: 15 85

   * - Syntax
     - a * b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 * 4`` → 20
       * ``5 * NULL`` → NULL


.. end_*_section

.. _expression_function_Operators_plus:

\+
..

Addition of two values. If one of the values is NULL the result will be NULL.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a + b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 + 4`` → 9
       * ``5 + NULL`` → NULL
       * ``'QGIS ' + 'ROCKS'`` → 'QGIS ROCKS'
       * ``to_datetime('2020-08-01 12:00:00') + '1 day 2 hours'`` → 2020-08-02T14:00:00


.. end_+_section

.. _expression_function_Operators_minus:

\-
..

Subtraction of two values. If one of the values is NULL the result will be NULL.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a - b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 - 4`` → 1
       * ``5 - NULL`` → NULL
       * ``to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours')`` → 2012-05-04T10:00:00


.. end_-_section

.. _expression_function_Operators_div:

/
.

Division of two values

.. list-table::
   :widths: 15 85

   * - Syntax
     - a / b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 / 4`` → 1.25
       * ``5 / NULL`` → NULL


.. end_/_section

.. _expression_function_Operators_lt:

<
.

Compares two values and evaluates to 1 if the left value is less than the right value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a < b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 < 4`` → 0
       * ``5 < 5`` → 0
       * ``4 < 5`` → 1


.. end_<_section

.. _expression_function_Operators_le:

<=
..

Compares two values and evaluates to 1 if the left value is less or equal than the right value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a <= b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 <= 4`` → 0
       * ``5 <= 5`` → 1
       * ``4 <= 5`` → 1


.. end_<=_section

.. _expression_function_Operators_ne:

<>
..

Compares two values and evaluates to 1 if they are not equal.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a <> b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 <> 4`` → 1
       * ``4 <> 4`` → 0
       * ``5 <> NULL`` → NULL
       * ``NULL <> NULL`` → NULL


.. end_<>_section

.. _expression_function_Operators_eq:

=
.

Compares two values and evaluates to 1 if they are equal.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a = b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 = 4`` → 0
       * ``4 = 4`` → 1
       * ``5 = NULL`` → NULL
       * ``NULL = NULL`` → NULL


.. end_=_section

.. _expression_function_Operators_gt:

>
.

Compares two values and evaluates to 1 if the left value is greater than the right value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a > b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 > 4`` → 1
       * ``5 > 5`` → 0
       * ``4 > 5`` → 0


.. end_>_section

.. _expression_function_Operators_ge:

>=
..

Compares two values and evaluates to 1 if the left value is greater or equal than the right value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a >= b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 >= 4`` → 1
       * ``5 >= 5`` → 1
       * ``4 >= 5`` → 0


.. end_>=_section

.. _expression_function_Operators_AND:

AND
...

Returns 1 when condition a and b are true.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a AND b
   * - Arguments
     - * **a** - condition
       * **b** - condition
   * - Examples
     - * ``TRUE AND TRUE`` → 1
       * ``TRUE AND FALSE`` → 0
       * ``4 = 2+2 AND 1 = 1`` → 1
       * ``4 = 2+2 AND 1 = 2`` → 0


.. end_AND_section

.. _expression_function_Operators_ILIKE:

ILIKE
.....

Returns 1 if the first parameter matches case-insensitive the supplied pattern. LIKE can be used instead of ILIKE to make the match case-sensitive. Works with numbers also.

.. list-table::
   :widths: 15 85

   * - Syntax
     - string/number ILIKE pattern
   * - Arguments
     - * **string/number** - string to search
       * **pattern** - pattern to find, you can use '%' as a wildcard, '_' as a single char and '\\\\' to escape these special characters.
   * - Examples
     - * ``'A' ILIKE 'A'`` → 1
       * ``'A' ILIKE 'a'`` → 1
       * ``'A' ILIKE 'B'`` → 0
       * ``'ABC' ILIKE 'b'`` → 0
       * ``'ABC' ILIKE 'B'`` → 0
       * ``'ABC' ILIKE '_b_'`` → 1
       * ``'ABC' ILIKE '_B_'`` → 1
       * ``'ABCD' ILIKE '_b_'`` → 0
       * ``'ABCD' ILIKE '_B_'`` → 0
       * ``'ABCD' ILIKE '_b%'`` → 1
       * ``'ABCD' ILIKE '_B%'`` → 1
       * ``'ABCD' ILIKE '%b%'`` → 1
       * ``'ABCD' ILIKE '%B%'`` → 1
       * ``'ABCD%' ILIKE 'abcd\\%'`` → 1
       * ``'ABCD' ILIKE '%B\\%'`` → 0


.. end_ILIKE_section

.. _expression_function_Operators_IN:

IN
..

Returns 1 if value is found within a list of values.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a IN b
   * - Arguments
     - * **a** - value
       * **b** - list of values
   * - Examples
     - * ``'A' IN ('A','B')`` → 1
       * ``'A' IN ('C','B')`` → 0


.. end_IN_section

.. _expression_function_Operators_IS:

IS
..

Returns 1 if a is the same as b.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a IS b
   * - Arguments
     - * **a** - any value
       * **b** - any value
   * - Examples
     - * ``'A' IS 'A'`` → 1
       * ``'A' IS 'a'`` → 0
       * ``4 IS 4`` → 1
       * ``4 IS 2+2`` → 1
       * ``4 IS 2`` → 0
       * ``$geometry IS NULL`` → 0, if your geometry is not NULL


.. end_IS_section

.. _expression_function_Operators_IS NOT:

IS NOT
......

Returns 1 if a is not the same as b.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a IS NOT b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``'a' IS NOT 'b'`` → 1
       * ``'a' IS NOT 'a'`` → 0
       * ``4 IS NOT 2+2`` → 0


.. end_IS NOT_section

.. _expression_function_Operators_LIKE:

LIKE
....

Returns 1 if the first parameter matches the supplied pattern. Works with numbers also.

.. list-table::
   :widths: 15 85

   * - Syntax
     - string/number LIKE pattern
   * - Arguments
     - * **string/number** - value
       * **pattern** - pattern to compare value with, you can use '%' as a wildcard, '_' as a single char and '\\\\' to escape these special characters.
   * - Examples
     - * ``'A' LIKE 'A'`` → 1
       * ``'A' LIKE 'a'`` → 0
       * ``'A' LIKE 'B'`` → 0
       * ``'ABC' LIKE 'B'`` → 0
       * ``'ABC' LIKE '_B_'`` → 1
       * ``'ABCD' LIKE '_B_'`` → 0
       * ``'ABCD' LIKE '_B%'`` → 1
       * ``'ABCD' LIKE '%B%'`` → 1
       * ``'1%' LIKE '1\\%'`` → 1
       * ``'1_' LIKE '1\\%'`` → 0


.. end_LIKE_section

.. _expression_function_Operators_NOT:

NOT
...

Negates a condition.

.. list-table::
   :widths: 15 85

   * - Syntax
     - NOT a
   * - Arguments
     - * **a** - condition
   * - Examples
     - * ``NOT 1`` → 0
       * ``NOT 0`` → 1


.. end_NOT_section

.. _expression_function_Operators_OR:

OR
..

Returns 1 when condition a or b is true.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a OR b
   * - Arguments
     - * **a** - condition
       * **b** - condition
   * - Examples
     - * ``4 = 2+2 OR 1 = 1`` → 1
       * ``4 = 2+2 OR 1 = 2`` → 1
       * ``4 = 2   OR 1 = 2`` → 0


.. end_OR_section

.. _expression_function_Operators_index:

[]
..

Index operator. Returns an element from an array or map value.

.. list-table::
   :widths: 15 85

   * - Syntax
     - [index]
   * - Arguments
     - * **index** - array index or map key value
   * - Examples
     - * ``array(1,2,3)[0]`` → 1
       * ``array(1,2,3)[2]`` → 3
       * ``array(1,2,3)[-1]`` → 3
       * ``map('a',1,'b',2)['a']`` → 1
       * ``map('a',1,'b',2)['b']`` → 2


.. end_[]_section

.. _expression_function_Operators_exp:

^
.

Power of two values.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a ^ b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``5 ^ 4`` → 625
       * ``5 ^ NULL`` → NULL


.. end_^_section

.. _expression_function_Operators_concat:

\||
...

Joins two values together into a string.



If one of the values is NULL the result will be NULL. See the CONCAT function for a different behavior.

.. list-table::
   :widths: 15 85

   * - Syntax
     - a || b
   * - Arguments
     - * **a** - value
       * **b** - value
   * - Examples
     - * ``'Here' || ' and ' || 'there'`` → 'Here and there'
       * ``'Nothing' || NULL`` → NULL
       * ``'Dia: ' || "Diameter"`` → 'Dia: 25'
       * ``1 || 2`` → '12'


.. end_||_section

.. _expression_function_Operators_regex:

~
.

Performs a regular expression match on a string value. Backslash characters must be double escaped (e.g., "\\\\s" to match a white space character).

.. list-table::
   :widths: 15 85

   * - Syntax
     - string ~ regex
   * - Arguments
     - * **string** - A string value
       * **regex** - A regular expression. Slashes must be escaped, eg \\\\d.
   * - Examples
     - * ``'hello' ~ 'll'`` → 1
       * ``'hello' ~ '^ll'`` → 0
       * ``'hello' ~ 'llo$'`` → 1
       * ``'abc123' ~ '\\d+'`` → 1


.. end_~_section

